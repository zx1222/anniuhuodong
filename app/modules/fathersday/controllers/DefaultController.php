<?php

namespace app\modules\fathersday\controllers;


use app\modules\fathersday\BL\ChallengerStatusTransfer;
use app\modules\fathersday\models\Photo;
use app\modules\fathersday\models\PhotoForm;
use app\modules\fathersday\models\Vote;
use app\modules\fathersday\models\VoteUser;
use Imagine\Image\Box;
use Imagine\Image\ImagineInterface;
use Yii;
use yii\base\Model;
use yii\web\Controller;
use yii\web\UploadedFile;
use yii\helpers\Url;
use  yii\data\ActiveDataProvider;

use app\modules\fathersday\BL\Lottery;
use app\modules\fathersday\BL\ChallengerLottery;
use app\modules\fathersday\BL\StatusTransfer;
use app\modules\fathersday\models\User;
use app\modules\fathersday\models\WinForm;
use yii\imagine\Image;

/**
 * Default controller for the `fathersday` module
 */
class DefaultController extends Controller
{
    public function init()
    {
        parent::init();

    }

    public function beforeAction($action)
    {

        if (Yii::$app->user->isGuest) {
            return $this->redirect(Url::to(['oauth/index'], true));
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub

    }

    /**
     * Renders the index view for the module
     * @return string
     */
    public function actionIndex()
    {
        return $this->render('index');
    }


    /**
     * 上传照片页面
     * Renders the campaign view for the module
     * @return string
     */
    public function actionCampaign()
    {
        $op = Yii::$app->request->get('op');
        $openid = Yii::$app->user->identity->openid;
        if (!empty(Yii::$app->user->identity->extra) && $op != 'renew') {
            return $this->redirect(Url::to(['default/mine'], true));
            exit;
        }

//        if (StatusTransfer::isEnd()) {
//            return $this->redirect(Url::to(['default/index'], true));
//            exit;
//        }

        if ($op == 'renew') {
            $photoModel = Photo::findOne(['openid' => $openid]);
            if ($photoModel->status != 'refused') {
                return $this->redirect(Url::to(['default/mine'], true));
            }
        } else {
            $photoModel = new PhotoForm();
            $photoModel->openid = $openid;

        }


        if (/*Yii::$app->request->isAjax &&*/
        $photoModel->load(Yii::$app->request->post())
        ) {

            $uploadPathHash = substr(strtolower(md5($openid)), 0, 2);
            $uploadPathO = '@uploadsPath/' . 'o/' . $uploadPathHash . '/';
            $uploadPathT = '@uploadsPath/' . 't/' . $uploadPathHash . '/';

            if (!file_exists(Yii::getAlias($uploadPathO)) && !mkdir(Yii::getAlias($uploadPathO), 0777, true)) {
                Yii::info($uploadPathO, 'up');
            }
            if (!file_exists(Yii::getAlias($uploadPathT)) && !mkdir(Yii::getAlias($uploadPathT), 0777, true)) {
                Yii::info($uploadPathT, 'up');
            }
            $photoModel->old_photo = UploadedFile::getInstance($photoModel, 'old_photo');

            if ($photoModel->validate()) {
                $fileName = Yii::$app->security->generateRandomString() . '.' . $photoModel->old_photo->extension;
                $photoModel->old_photo->saveAs(Yii::getAlias($uploadPathO . $fileName));

                $tw = 800;
                $th = 800;
                list($fw, $fh, $tmp) = getimagesize(Yii::getAlias($uploadPathO . $fileName));
                if ($fw / $tw > $fh / $th) {
                    $th = $tw * ($fh / $fw);
                } else {
                    $tw = $th * ($fw / $fh);
                }
                Image::getImagine()->open(Yii::getAlias($uploadPathO . $fileName))
                    ->thumbnail(new Box($tw, $th))
                    ->save(Yii::getAlias($uploadPathT . $fileName), ['quality' => 90]);
                $photoModel->old_photo = $fileName;

                unset($fileName);
            }

            $photoModel->new_photo = UploadedFile::getInstance($photoModel, 'new_photo');

            if ($photoModel->validate()) {
                $fileName = Yii::$app->security->generateRandomString() . '.' . $photoModel->new_photo->extension;
                $photoModel->new_photo->saveAs(Yii::getAlias($uploadPathO . $fileName));

                $tw = 800;
                $th = 800;
                list($fw, $fh, $tmp) = getimagesize(Yii::getAlias($uploadPathO . $fileName));
                if ($fw / $tw > $fh / $th) {
                    $th = $tw * ($fh / $fw);
                } else {
                    $tw = $th * ($fw / $fh);
                }
                Image::getImagine()->open(Yii::getAlias($uploadPathO . $fileName))
                    ->thumbnail(new Box($tw, $th))
                    ->save(Yii::getAlias($uploadPathT . $fileName), ['quality' => 90]);
                $photoModel->new_photo = $fileName;

            }

            if ($photoModel->save() !== false) {
                Yii::$app->user->identity->extra = 1;
                if (Yii::$app->user->identity->save()) {
                    return 1;
                } else {
                    return 0;
                }
            }

        }

        return $this->render('campaign', [
            'model' => $photoModel
        ]);
    }

    /**
     * 看看别人的照片
     * Renders the exhibition view for the module
     * @return string
     */
    public function actionExhibition()
    {

        $dataProvider = new ActiveDataProvider([
            'query' => Photo::find()->joinWith('weixinUser')->select('{{%fathersday_photo}}.*')
                ->addSelect('{{%fathersday_weixin_user}}.wx_username,{{%fathersday_weixin_user}}.wx_avatar')
                ->where(['status' => 'approved'])
                ->andFilterWhere(['id' => Yii::$app->request->post('no')])
                ->orderBy(['rand()' => SORT_DESC]),

//                ->orderBy(['created_at' => SORT_DESC]),
            'pagination' => [
                'pageSize' => 10
            ]
        ]);

        return $this->render('exhibition', [
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * 查看自己, 审核与否在此页面
     * Renders the share view for the module
     * @return string
     */
    public function actionMine()
    {
        $photoModel = Photo::findOne(['openid' => Yii::$app->user->identity->openid]);

        if (empty($photoModel)) {
            return $this->redirect(Url::to(['default/index'], true));
        }
        return $this->render('mine', [
            'photoModel' => $photoModel
        ]);
    }

    /**
     * 查看详情,在此页面投票
     * Renders the vote view for the module
     * @return string
     */
    public function actionPhoto($id)
    {

        if (($photoModel = Photo::findOne(['id' => $id, 'status' => Photo::STATUS_APPROVED])) === null) {
            return $this->redirect(Url::to(['default/index'], true));
        }

        return $this->render('photo', [
            'photoModel' => $photoModel
        ]);
    }

    /**
     * 投票操作
     * Renders the lottery view for the module
     * @return string
     */
    public function actionVote($id)
    {
        if (($photoModel = Photo::findOne(['id' => $id, 'status' => Photo::STATUS_APPROVED])) === null) {
            $res['code'] = 404;
            return json_encode($res);

        }

        $currentDay = (new \DateTime())->format('Y-m-d 00:00:00');
        $openid = Yii::$app->user->identity->openid;

        $voteUserModel = VoteUser::find()->where(['>=', 'created_at', $currentDay])->andWhere(['openid' => $openid])->one();
        if (!empty($voteUserModel) && !empty($voteUserModel->vote1) && !empty($voteUserModel->vote2) && !empty($voteUserModel->vote3)) {
            $res['code'] = 403;
            return json_encode($res);

        }

        if (empty($voteUserModel)) {
            $voteUserModel = new VoteUser();
            $voteUserModel->created_at = $currentDay;
            $voteUserModel->openid = $openid;
            $voteUserModel->save();
        }

        foreach (['vote1', 'vote2', 'vote3'] as $attribute) {

            if (empty($voteUserModel->$attribute)) {

                $voteModel = new Vote();

                $voteModel->openid = $openid;
                $voteModel->photo_id = $photoModel->id;
                $voteModel->ip = $_SERVER["REMOTE_ADDR"];

                if ($voteModel->save() !== false) {
                    $voteUserModel->$attribute = $voteModel->id;
                    $voteUserModel->save();

                    $photoModel->vote = Vote::find()->where(['photo_id' => $photoModel->id])->count();
                    $photoModel->save();
                }

                if ($attribute == 'vote1') {
                    $res['code'] = 200;
                } else {
                    $res['code'] = 250;
                }
                break;
            } else {
                $existVoteToDay = Vote::findOne($voteUserModel->$attribute);
                if (!empty($existVoteToDay) && $existVoteToDay->photo_id == $id) {
                    $res['code'] = 304;
                    break;
                }
            }
        }

        return json_encode($res);


    }

    /**
     * 投票人抽奖
     * Renders the lottery view for the module
     * @return string
     */
    public function actionLottery()
    {


        StatusTransfer::markRenew();

        return $this->render('lottery', [
            'forbidden' => StatusTransfer::allowLottery(),
        ]);
    }

    /**
     * Renders the index view for the module 抽奖
     * @return string
     */
    public function actionLotteryRun()
    {

        if (Yii::$app->request->isAjax && Yii::$app->request->post()) {
            // 计算今天第几天

            if (StatusTransfer::getOrdinal() > 7) {
                return;
            }


            if (StatusTransfer::allowLottery() || StatusTransfer::getToDayStatus() % 10 == 0) {
                // 本日抽奖次数达到上线:不允许再抽
                echo '别闹!';
                return false;
            }

            if (!StatusTransfer::allowLottery() && StatusTransfer::getToDayPid() != 0) {
                // 本日已经获奖:可抽但不会中奖
                $result = Lottery::getBad();
                StatusTransfer::markPause();

            }

            if (!StatusTransfer::allowLottery() && StatusTransfer::getToDayPid() == 0) {
                // 可以正常抽奖
                $result = Lottery::run();
            }

            $min = $result['min'];
            $max = $result['max'];
            if (is_array($min)) { //多等奖的时候
                $i = mt_rand(0, count($min) - 1);
                $result['angle'] = mt_rand($min[$i], $max[$i]);
            } else {
                $result['angle'] = mt_rand($min, $max); //随机生成一个角度
            }
            $result['praisename'] = $result['praisename'];


            return json_encode($result);
        }

    }

    /**
     * 投票人抽奖
     * Renders the lottery view for the module
     * @return string
     */
    public function actionLotteryChallenger()
    {

        if (Yii::$app->user->identity->extra == '') {
            return $this->redirect(Url::to(['default/index'], true));
        }

        ChallengerStatusTransfer::markRenew();
        if (ChallengerStatusTransfer::allowLottery()) {
            return $this->redirect(['activity']);
        }
        return $this->render('lottery-challenger', [
        ]);

    }

    /**
     * Renders the index view for the module 抽奖
     * @return string
     */
    public function actionLotteryChallengerRun()
    {
        if (Yii::$app->user->identity->extra == 0 ) {
            return false;
        }


        if (Yii::$app->request->isAjax && Yii::$app->request->post()) {
            // 计算今天第几天

            if (ChallengerStatusTransfer::getOrdinal() > 7) {
                return;
            }


            if (ChallengerStatusTransfer::allowLottery() || ChallengerStatusTransfer::getToDayStatus() % 10 == 0) {
                // 本日抽奖次数达到上线:不允许再抽
                echo '别闹!';
                return false;
            }

            if (!ChallengerStatusTransfer::allowLottery() && ChallengerStatusTransfer::getToDayPid() != 0) {
                // 本日已经获奖:可抽但不会中奖
                $result = ChallengerLottery::getBad();
                ChallengerStatusTransfer::markPause();

            }

            if (!ChallengerStatusTransfer::allowLottery() && ChallengerStatusTransfer::getToDayPid() == 0) {
                // 可以正常抽奖
                $result = ChallengerLottery::run();
            }
            $min = $result['min'];

            $max = $result['max'];

            if (is_array($min)) { //多等奖的时候
                $i = mt_rand(0, count($min) - 1);
                $result['angle'] = mt_rand($min[$i], $max[$i]);
            } else {
                $result['angle'] = mt_rand($min, $max); //随机生成一个角度
            }
            $result['praisename'] = $result['praisename'];


            return json_encode($result);
        }

    }

    /**
     * 抽奖之后结束
     * Renders the activity view for the module
     * @return string
     */
    public function actionActivity()
    {
        return $this->render('activity');
    }
}
